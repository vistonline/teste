function preLoad() {
	if (!this.support.loading) {
		alert("Você precisa do Flash Player 9.028 ou acima para usar SWFUpload.");
		return false;
	}
}
function loadFailed() {
	alert("Aconteceu algo de errado com o carregamento do SWFUpload. Se fosse uma aplicação real nós deveriamos te esclarecer e oferecer uma alternativa");
}

function fileQueueError(file, errorCode, message) {
	try {
		var imageName = "error.gif";
		var errorName = "";
		if (errorCode === SWFUpload.errorCode_QUEUE_LIMIT_EXCEEDED) {
			errorName = "Você esta tentando enviar muitos arquivo.";
		}

		if (errorName !== "") {
			alert(errorName);
			return;
		}

		switch (errorCode) {
		case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
			imageName = "zerobyte.gif";
			break;
		case SWFUpload.QUEUE_ERROR.FILE_EXCEEDS_SIZE_LIMIT:
			imageName = "toobig.gif";
			alert("Arquivo é maior que o permitido (3Mb)");
			return false;
			break;
		case SWFUpload.QUEUE_ERROR.ZERO_BYTE_FILE:
		case SWFUpload.QUEUE_ERROR.INVALID_FILETYPE:
		default:
			alert(message);
			break;
		}

		addImage("images/" + imageName);

	} catch (ex) {
		this.debug(ex);
	}

}



function fileDialogComplete(numFilesSelected, numFilesQueued) {
	try {
		if (numFilesQueued > 0)
          {
            //alert(this.customSettings.seguradora);
            //seguradora 20 boné
            //alert("Seguradora :" + this.customSettings.seguradora);
            //this.funcao = this.startResizedUpload;
            //if(this.customSettings.seguradora == 20) this.funcao = this.startUpload;
            //this.funcao(this.getFile(0).ID, this.customSettings.imageWidth, this.customSettings.imageHeight, SWFUpload.RESIZE_ENCODING.JPEG, this.customSettings.imageQuality, false);

            if(this.customSettings.seguradora != 20)
            //if(true)
              {
                //alert('comprimento: ' + this.customSettings.imageWidth + '\naltura: ' + this.customSettings.imageHeight + '\nQualidade: ' + this.customSettings.imageQuality);
                this.startResizedUpload(this.getFile(0).ID, this.customSettings.imageWidth, this.customSettings.imageHeight, SWFUpload.RESIZE_ENCODING.JPEG, this.customSettings.imageQuality, true);
                //alert(this.getFile(0).ID);
              }
            else
              {
                //alert("entrou no else");
                this.startUpload();
				//this.startResizedUpload(this.getFile(0).ID, 1022, 766, SWFUpload.RESIZE_ENCODING.JPEG, 70, true);
              }
            
                                         //this.startResizedUpload(this.getFile(0).ID, this.customSettings.thumbnail_width, this.customSettings.thumbnail_height, SWFUpload.RESIZE_ENCODING.JPEG, this.customSettings.thumbnail_quality, false);}
            
           //this.startResizedUpload(this.getFile(0).ID, 100, 100, SWFUpload.RESIZE_ENCODING.JPEG, 100);
		    
		  }
	} catch (ex) {
		this.debug(ex);
	}
}

function uploadProgress(file, bytesLoaded) {

	try {
		var percent = Math.ceil((bytesLoaded / file.size) * 100);

		var progress = new FileProgress(file,  this.customSettings.upload_target);
		progress.setProgress(percent);
		progress.setStatus("Carregando...");
		progress.toggleCancel(true, this);
	} catch (ex) {
		this.debug(ex);
	}
}

function uploadSuccess(file, serverData) {
	try {
		var progress = new FileProgress(file,  this.customSettings.upload_target);

		if (serverData.substring(0, 7) === "FILEID:") {
            if(this.customSettings.seguradora == 20) addImage("thumbnail.php?id=" + serverData.substring(7));

			progress.setStatus("Imagem enviada.");
			progress.toggleCancel(false);
		} else {
			addImage("images/error.gif");
			progress.setStatus("Error.");
			progress.toggleCancel(false);
			alert(serverData);

		}

	} catch (ex) {
		this.debug(ex);
	}
}

function uploadComplete(file) {
	try {
		/*  I want the next upload to continue automatically so I'll call startUpload here */
		if (this.getStats().files_queued > 0)
          {
			//this.startResizedUpload(this.getFile(0).ID, 100, 100, SWFUpload.RESIZE_ENCODING.JPEG, 100);
			//this.startUpload();
           if(this.customSettings.seguradora != 20)
            //if(true)
              {//Não é Boné
                //alert('comprimento: ' + this.customSettings.imageWidth + '\naltura: ' + this.customSettings.imageHeight + '\nQualidade: ' + this.customSettings.imageQuality);
                this.startResizedUpload(this.getFile(0).ID, this.customSettings.imageWidth, this.customSettings.imageHeight, SWFUpload.RESIZE_ENCODING.JPEG, this.customSettings.imageQuality, true);
                //alert(this.getFile(0).ID);
              }
            else
              {//É Bone
                //this.startUpload();				
				this.startResizedUpload(this.getFile(0).ID, 1022, 766, SWFUpload.RESIZE_ENCODING.JPEG, 70, true);
              }
		  }
        else
         {  
			var progress = new FileProgress(file,  this.customSettings.upload_target);
			progress.setComplete();
			progress.setStatus("Todas as imagem foram recebidas com sucesso.");            
			//Envia as fotos automaticamente somente para seguradoras diferente de boné
            if(this.customSettings.seguradora != 20)
			  {
			    alert("Imagens enviadas com sucesso.");
			    document.forms['myform'].submit();
			  }
			progress.toggleCancel(false);
		}
	} catch (ex) {
		this.debug(ex);
	}
}

function uploadError(file, errorCode, message) {
	var imageName =  "error.gif";
	var progress;
	try {
		switch (errorCode) {
		case SWFUpload.UPLOAD_ERROR.FILE_CANCELLED:
			try {
				progress = new FileProgress(file,  this.customSettings.upload_target);
				progress.setCancelled();
				progress.setStatus("Cancelled");
				progress.toggleCancel(false);
			}
			catch (ex1) {
				this.debug(ex1);
			}
			break;
		case SWFUpload.UPLOAD_ERROR.UPLOAD_STOPPED:
			try {
				progress = new FileProgress(file,  this.customSettings.upload_target);
				progress.setCancelled();
				progress.setStatus("Stopped");
				progress.toggleCancel(true);
			}
			catch (ex2) {
				this.debug(ex2);
			}
		case SWFUpload.UPLOAD_ERROR.UPLOAD_LIMIT_EXCEEDED:
			imageName = "uploadlimit.gif";
			break;
		default:
			alert(message);
			break;
		}

		addImage("images/" + imageName);

	} catch (ex3) {
		this.debug(ex3);
	}

}
function valida()
  {
	elementos=document.getElementsByTagName('select');
	var chassi = laudo = false;
	for (i=0; i < elementos.length; i++ )
	  {
		if (elementos[i].selectedIndex == 0) return false;
        if(elementos[i].selectedIndex == 7) chassi = true;
		if((elementos[i].selectedIndex == 21) || (elementos[i].selectedIndex == 22)) laudo = true;
	  }
	if(!(laudo && chassi))
	  {
	    resposta = confirm('Para enviar é obrigatório inserir fotos de Laudo e Chassi, porém você não inseriu as duas.\n\nPara inserir as fotos que faltam clique em Cancelar.\n\nPara enviar assim mesmo clique em OK.');
		return resposta;
	  }
	return (laudo && chassi);
  }
	
function verificaFormBone(elemento)
  {
    var quantidade = 0;
	elementos = document.getElementsByTagName('select');
	for(index = 0; index < elementos.length; index++)
	  {
	    if(elemento.value == elementos[index].value) quantidade++;
	  }
	 if(quantidade > 1)
	   {
	     elemento.selectedIndex = 0;
		 alert("Esta opção já foi escolhida!\nEscolha outra opção para classificar a foto\nou mude a outra foto.");
	   }
  }
  
function addImage(src) {
	var id=src.split("=")
	var newImg = document.createElement("img");
	newImg.style.margin = "5px";
	
	/*document.getElementById("thumbnails").appendChild(newImg);*/
	
	var valoroption=vetoroption=Array();
	valoroption["vazio"]="Escolha uma Opção";
	valoroption["5"]="Avaria1";
	valoroption["6"]="Avaria2";
	valoroption["7"]="Avaria3";
	valoroption["8"]="Avaria4";
	valoroption["41"]="Blindagem1";
	valoroption["42"]="Blindagem2";
	valoroption["3"]="Chassi";
	valoroption["16"]="Compartimento do Motor";
	valoroption["0"]="Decalque";
	valoroption["4"]="Documento";
	valoroption["12"]="Etiqueta1";
	valoroption["13"]="Etiqueta2";
	valoroption["14"]="Etiqueta3";
	valoroption["1"]="Frente1";
	valoroption["10"]="Frente2";
	valoroption["17"]="Hodometro";
	valoroption["40"]="Interior";
	valoroption["15"]="KitGás-15";
	valoroption["37"]="KitGás-37";
	valoroption["39"]="Lacre";
	valoroption["L1"]="Laudo1";
	valoroption["L2"]="Laudo2";
	valoroption["9"]="Nº do Motor";
	valoroption["O1"]="Outros1";
	valoroption["O2"]="Outros2";
	valoroption["O3"]="Outros3";
	valoroption["O4"]="Outros4";
	valoroption["O5"]="Outros5";
	valoroption["O6"]="Outros6";
	valoroption["O7"]="Outros7";
	valoroption["O8"]="Outros8";
	valoroption["O9"]="Outros9";
	valoroption["18"]="Placa1";
	valoroption["19"]="Placa2";
	valoroption["20"]="Plaqueta1";
	valoroption["21"]="Plaqueta2";
	valoroption["22"]="Pneu";
	valoroption["2"]="Traseira1";
	valoroption["11"]="Traseira2";
	valoroption["23"]="Vão de Roda";
	valoroption["24"]="Vidro";
	valoroption["38"]="Vidro";
	valoroption["excluir"]="Excluir";
	
	var divImagem=document.createElement("div");
		divImagem.setAttribute("id","foto");
	//var formImagem=document.createElement("form");
	var selectImagem=document.createElement("select");
	selectImagem.setAttribute("id", id[1]);
	selectImagem.setAttribute("name", id[1]);
	selectImagem.setAttribute("onchange", "verificaFormBone(this);");
	var vetoroption=Array();
	for(index in valoroption)
      {
		vetoroption[index]=document.createElement("option");
		if(index=='vazio') vetoroption[index].selected='selected';
		//vetoroption[index].setAttribute("value",index);
			vetoroption[index].value=index;
			vetoroption[index].text=valoroption[index];
		if(document.all) selectImagem.add(vetoroption[index]);
		else selectImagem.appendChild(vetoroption[index]);
	  }
			divImagem.appendChild(newImg);
            //alert(swfu.customSettings.seguradora);
			if(swfu.customSettings.seguradora == 20) divImagem.appendChild(selectImagem);
			//divImagem.appendChild(formImagem);
			//formImagem.appendChild(selectImagem);
		document.getElementById("thumbnails").appendChild(divImagem);
		//document.getElementById("thumbnails").insertBefore(divImagem,document.getElementById("btn_foto"));
	if (newImg.filters) {
		try {
			newImg.filters.item("DXImageTransform.Microsoft.Alpha").opacity = 0;
		} catch (e) {
			// If it is not set initially, the browser will throw an error.  This will set it if it is not set yet.
			newImg.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + 0 + ')';
		}
	} else {
		newImg.style.opacity = 0;
	}

	newImg.onload = function () {
		fadeIn(newImg, 0);
	};
	newImg.src = src;
}

function fadeIn(element, opacity) {
	var reduceOpacityBy = 5;
	var rate = 30;	// 15 fps

	if (opacity < 100) {
		opacity += reduceOpacityBy;
		if (opacity > 100) {
			opacity = 100;
		}

		if (element.filters) {
			try {
				element.filters.item("DXImageTransform.Microsoft.Alpha").opacity = opacity;
			} catch (e) {
				// If it is not set initially, the browser will throw an error.  This will set it if it is not set yet.
				element.style.filter = 'progid:DXImageTransform.Microsoft.Alpha(opacity=' + opacity + ')';
			}
		} else {
			element.style.opacity = opacity / 100;
		}
	}

	if (opacity < 100) {
		setTimeout(function () {
			fadeIn(element, opacity);
		}, rate);
	}
}
/* ******************************************
 *	FileProgress Object
 *	Control object for displaying file info
 * ****************************************** */

function FileProgress(file, targetID) {
	this.fileProgressID = "divFileProgress";

	this.fileProgressWrapper = document.getElementById(this.fileProgressID);
	if (!this.fileProgressWrapper) {
		this.fileProgressWrapper = document.createElement("div");
		this.fileProgressWrapper.className = "progressWrapper";
		this.fileProgressWrapper.id = this.fileProgressID;

		this.fileProgressElement = document.createElement("div");
		this.fileProgressElement.className = "progressContainer";

		var progressCancel = document.createElement("a");
		progressCancel.className = "progressCancel";
		progressCancel.href = "#";
		progressCancel.style.visibility = "hidden";
		progressCancel.appendChild(document.createTextNode(" "));

		var progressText = document.createElement("div");
		progressText.className = "progressName";
		progressText.appendChild(document.createTextNode(file.name));

		var progressBar = document.createElement("div");
		progressBar.className = "progressBarInProgress";

		var progressStatus = document.createElement("div");
		progressStatus.className = "progressBarStatus";
		progressStatus.innerHTML = "&nbsp;";

		this.fileProgressElement.appendChild(progressCancel);
		this.fileProgressElement.appendChild(progressText);
		this.fileProgressElement.appendChild(progressStatus);
		this.fileProgressElement.appendChild(progressBar);

		this.fileProgressWrapper.appendChild(this.fileProgressElement);

		document.getElementById(targetID).appendChild(this.fileProgressWrapper);
		fadeIn(this.fileProgressWrapper, 0);

	} else {
		this.fileProgressElement = this.fileProgressWrapper.firstChild;
		this.fileProgressElement.childNodes[1].firstChild.nodeValue = file.name;
	}

	this.height = this.fileProgressWrapper.offsetHeight;

}
FileProgress.prototype.setProgress = function (percentage) {
	this.fileProgressElement.className = "progressContainer green";
	this.fileProgressElement.childNodes[3].className = "progressBarInProgress";
	this.fileProgressElement.childNodes[3].style.width = percentage + "%";
};
FileProgress.prototype.setComplete = function () {
	this.fileProgressElement.className = "progressContainer blue";
	this.fileProgressElement.childNodes[3].className = "progressBarComplete";
	this.fileProgressElement.childNodes[3].style.width = "";

};
FileProgress.prototype.setError = function () {
	this.fileProgressElement.className = "progressContainer red";
	this.fileProgressElement.childNodes[3].className = "progressBarError";
	this.fileProgressElement.childNodes[3].style.width = "";
};

FileProgress.prototype.setCancelled = function () {
	this.fileProgressElement.className = "progressContainer";
	this.fileProgressElement.childNodes[3].className = "progressBarError";
	this.fileProgressElement.childNodes[3].style.width = "";
};

FileProgress.prototype.setStatus = function (status) {
	this.fileProgressElement.childNodes[2].innerHTML = status;
};

FileProgress.prototype.toggleCancel = function (show, swfuploadInstance) {
	this.fileProgressElement.childNodes[0].style.visibility = show ? "visible" : "hidden";
	if (swfuploadInstance) {
		var fileID = this.fileProgressID;
		this.fileProgressElement.childNodes[0].onclick = function () {
			swfuploadInstance.cancelUpload(fileID);
			return false;
		};
	}
};
